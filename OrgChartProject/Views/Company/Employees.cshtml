@model IEnumerable<OrgChartProject.Models.Employee>

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Employees</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/2.1.53/go.js"></script>
    <style>
        #orgChartContainer {
            width: 80%;
            height: 600px;
            float: left;
        }
        #orgChart {
            width: 100%;
            height: 100%;
            border: 1px solid black;
        }
        #paletteContainer {
            width: 20%;
            height: 600px;
            float: left;
            border: solid 1px black;
            overflow-y: auto;
        }
        #myPalette {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <h2>@ViewBag.CompanyName - @ViewBag.DepartmentName</h2>
    <div id="orgChartContainer">
        <div id="orgChart"></div>
    </div>
    <div id="paletteContainer">
        <div id="myPalette"></div>
    </div>

    <script>
        function init() {
            var $ = go.GraphObject.make;

            var myDiagram = $(go.Diagram, "orgChart",
                {
                    "undoManager.isEnabled": true,
                    layout: $(go.TreeLayout,
                        { angle: 90, layerSpacing: 35 }),
                    "draggingTool.dragsTree": true,
                    "commandHandler.deletesTree": true
                });

            myDiagram.nodeTemplate =
                $(go.Node, "Auto",
                    {
                        deletable: false,
                        toolTip:
                            $(go.Adornment, "Auto",
                                $(go.Shape, { fill: "#FFFFCC" }),
                                $(go.TextBlock, { margin: 4 },
                                    new go.Binding("text", "", function(data) {
                                        return data.name + "\n" + data.position;
                                    }))
                            )
                    },
                    $(go.Shape, "RoundedRectangle", { strokeWidth: 0, fill: "white" }),
                    $(go.Panel, "Horizontal",
                        $(go.Picture,
                            {
                                margin: 10,
                                width: 50,
                                height: 50,
                                background: "white"
                            },
                            new go.Binding("source")),
                        $(go.Panel, "Table",
                            $(go.TextBlock, "Default Text",
                                { row: 0, column: 0, margin: 2, stroke: "black", font: "bold 16px sans-serif" },
                                new go.Binding("text", "name")),
                            $(go.TextBlock, "Position",
                                { row: 1, column: 0, margin: 2, stroke: "gray", font: "12px sans-serif" },
                                new go.Binding("text", "position"))
                        )
                    )
                );

            // Okları çizmek için linkTemplate
            myDiagram.linkTemplate =
                $(go.Link,
                    { routing: go.Link.Orthogonal, corner: 5 },
                    $(go.Shape, { strokeWidth: 3, stroke: "#555" }),
                    $(go.Shape, { toArrow: "Standard", stroke: null, fill: "#555" })  // Ok ucu ekliyoruz
                );

            myDiagram.model = new go.GraphLinksModel([], []);

            var myPalette = $(go.Palette, "myPalette",
                {
                    nodeTemplate: myDiagram.nodeTemplate,
                    model: new go.GraphLinksModel([
                        @foreach (var employee in Model)
                        {
                            @: { key: @employee.Id, name: "@employee.FirstName @employee.LastName", source: "@employee.PhotoPath", position: "@employee.Position" },
                        }
                    ])
                });

            myDiagram.addDiagramListener("ExternalObjectsDropped", function(e) {
                e.subject.each(function(part) {
                    if (part instanceof go.Node) {
                        updateManagerId(part.data.key, part.data.manager);
                    }
                });
            });
        }

        function updateManagerId(employeeId, newManagerId) {
            fetch(`/Company/UpdateManager?employeeId=${employeeId}&newManagerId=${newManagerId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => {
                if (response.ok) {
                    console.log('Manager updated successfully');
                } else {
                    console.error('Failed to update manager');
                }
            });
        }

        window.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
